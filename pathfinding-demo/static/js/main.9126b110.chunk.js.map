{"version":3,"sources":["utils/pathfinding/pathfinding.worker.ts","../node_modules/go-pathfinding sync","utils/pathfinding/js.ts","utils/ForestGenerator.ts","utils/pathfinding/threaded.ts","utils/pathfinding/go.ts","utils/pathfinding/as.ts","pathfinding-demo/models/Tree.js","pathfinding-demo/models/Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Worker","webpackEmptyContext","req","e","Error","code","keys","resolve","id","grid","finder","Tree","x","y","age","this","ForestGenerator","height","width","initialTrees","seedRadius","seedDecay","seedStrength","desiredCoverage","seed","forest","trees","seeds","Map","Array","fill","map","col","i","Math","ceil","random","addTree","currentlyCovered","getCoverage","step","removeSeeds","entries","split","parseInt","size","length","push","tmpMap","coords","strength","set","index","tree","p","key","has","delete","seedTrees","max","min","xMin","xMax","yMin","yMax","trunc","value","get","a","Promise","findPath","from","to","path","clone","Module","initPathfinding","startPathFinding","Grid","BiBestFirstFinder","heuristic","Heuristic","octile","setObstacles","obstacles","forEach","setWalkableAt","findPathAsync","res","worker","rej","postMessage","pathfinding","operation","payload","onmessage","event","data","pathfindingResult","result","isInitialized","go","Go","fetch","response","arrayBuffer","bytes","WebAssembly","instantiate","importObject","run","instance","rawPath","window","j","setGrid","obstaclesArray","reduce","aggr","AsBind","_width","_height","Int8Array","reject","props","useLoader","GLTFLoader","nodes","materials","scale","tree_trunk001_0","geometry","computeBoundingBox","z","tree_leaves001_0","boundingBox","rotation","PI","dispose","position","castShadow","receiveShadow","attach","color","material","memo","isWalking","Abe","FBXLoader","AbeWalking","traverse","o","isMesh","mixer","AnimationMixer","idleAnimation","clipAction","animations","walkAnimation","useEffect","stop","play","clock","Clock","useFrame","delta","getDelta","update","object","PathfindingGo","PathfindingAs","extend","OrbitControls","Controls","target","orbitRef","useRef","useThree","camera","gl","lookAt","current","copy","THREE","maxPolarAngle","minPolarAngle","args","domElement","ref","Pines","useState","setTrees","generate","fallback","Path","points","slice","Plane","handleClick","handleMove","onClick","onPointerMove","Camera","makeDefault","fov","playerPosition","targetPosition","setTargetPosition","cameraPosition","setPath","setIsWalking","isFinderReady","setFinderReady","isWorkerBusy","setIsWorkerBusy","finderMode","setFinderMode","Finder","useMemo","PathfindingJs","PathfindingThreaded","newTarget","point","then","className","mode","onCreated","shadowMap","enabled","type","intensity","penumbra","decay","Player","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9126b110.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"adad9c7d41097794a22d.worker.js\");\n};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 162;","import { Grid, BiBestFirstFinder, Heuristic, Util } from \"pathfinding\";\nimport { PathfindingModule } from \"./interfaces\";\nimport { Tree } from \"../ForestGenerator\";\n\nlet grid: Grid;\nlet finder: BiBestFirstFinder;\n\nasync function initPathfinding(): Promise<void> {\n  return Promise.resolve();\n}\n\nfunction startPathFinding(width: number, height: number): boolean {\n  grid = new Grid(width, height);\n  finder = new BiBestFirstFinder({\n    heuristic: Heuristic.octile,\n  });\n\n  return true;\n}\nfunction setObstacles(obstacles: Array<Tree>): boolean {\n  obstacles.forEach(({ x, y }) => {\n    grid.setWalkableAt(y, x, false);\n  });\n\n  return true;\n}\n\nfunction findPath(from: [number, number, number], to: [number, number, number]): Array<number[]> {\n  const path = finder.findPath(\n    Math.trunc(from[2] / 2),\n    Math.trunc(from[0] / 2),\n    Math.trunc(to[2] / 2),\n    Math.trunc(to[0] / 2),\n    grid.clone()\n  );\n\n  if (path.length === 0) {\n    return path;\n  }\n\n  // return Util.smoothenPath(\n  //   grid,\n  //   path\n  // );\n  return path;\n}\n\nfunction findPathAsync(from: [number, number, number], to: [number, number, number]): Promise<Array<number[]>> {\n  return new Promise((res) => {\n    res(findPath(from, to));\n  });\n}\n\nconst Module: PathfindingModule = {\n  initPathfinding,\n  startPathFinding,\n  setObstacles,\n  findPath,\n  findPathAsync,\n};\n\nexport default Module;\n","// based on https://github.com/wesleykerr/level-generator/blob/master/core/src/main/java/com/seekerr/games/procedural/ForestGenerationImpl.java\n\nconst FOREST_STATE_EMPTY = 1;\nconst FOREST_STATE_FOREST = 2;\nconst FOREST_STATE_SEEDED = 3;\n\nexport class Tree {\n  x: number;\n  y: number;\n  age: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.age = 1;\n  }\n};\n\nexport class ForestGenerator {\n  initialTrees: number;\n  seedRadius: number = 5;\n  seedDecay: number = 0.3;\n  seedStrength: number = 0.1;\n\n  desiredCoverage: number = 0.2;\n  seed: number = 7;\n  width: number;\n  height: number;\n  forest: number[][];\n  trees: Array<Tree> = [];\n  seeds: Map<String, number> = new Map();\n\n  constructor(height: number = 100, width: number = 100, initialTrees: number = 10) {\n    this.height = height;\n    this.width = width;\n    this.initialTrees = initialTrees;\n\n    this.forest = Array(width).fill(FOREST_STATE_EMPTY);\n    this.forest = this.forest.map(col => Array(height).fill(FOREST_STATE_EMPTY));\n    for (let i = 0; i < this.initialTrees; i++) {\n      while (true) {\n        const x = Math.ceil(Math.random() * this.width);\n        const y = Math.ceil(Math.random() * this.height);\n        if (this.forest[x][y] === FOREST_STATE_EMPTY) {\n          this.forest[x][y] = FOREST_STATE_FOREST;\n          this.addTree(x, y);\n          break;\n        }\n      }\n    }\n  }\n\n  generate() {\n    let currentlyCovered = this.getCoverage();\n    while (currentlyCovered < this.desiredCoverage) {\n      this.step();\n      currentlyCovered = this.getCoverage();\n    }\n    this.removeSeeds();\n\n    return this.trees;\n  }\n\n  removeSeeds() {\n    for (let [coords] of this.seeds.entries()) {\n      const [x, y] = coords.split(',').map(x => parseInt(x));\n      this.forest[x][y] = FOREST_STATE_EMPTY;\n    }\n  }\n\n  getCoverage() {\n    const size = this.width * this.height;\n    return this.trees.length / size;\n  }\n\n  addTree(x: number, y: number) {\n    this.trees.push(new Tree(x, y));\n    this.forest[x][y] = FOREST_STATE_FOREST;\n  }\n\n  step() {\n    // гибель семян\n    const tmpMap: Map<String, number> = new Map();\n    for (const [coords, strength] of this.seeds.entries()) {\n      tmpMap.set(coords, strength - (this.seedDecay * strength));\n    }\n    this.seeds = tmpMap;\n\n    // рост деревьев\n    for (const [coords, strength] of this.seeds.entries()) {\n      if (Math.random() < strength) {\n        const [x, y] = coords.split(',').map(x => parseInt(x));\n        this.addTree(x, y);\n      }\n    }\n    this.trees = this.trees.map(tree => {\n      tree.age++;\n      return tree;\n    })\n\n    // убираем семена в случае, когда они проросли\n    for (const index in this.trees) {\n      const p = this.trees[index];\n      const key = p.x + \",\" + p.y;\n      if (this.seeds.has(key))\n        this.seeds.delete(key);\n    }\n\n    this.seedTrees();\n  }\n\n  seedTrees() {\n    for (const index in this.trees) {\n      const tree = this.trees[index];\n      const [xMin, xMax, yMin, yMax] = [\n        Math.max(tree.x - this.seedRadius, 0),\n        Math.min(tree.x + this.seedRadius, this.width),\n        Math.max(tree.y - this.seedRadius, 0),\n        Math.min(tree.y + this.seedRadius, this.height),\n      ];\n\n      for (let i = 0; i <= tree.age * 2; i++) {        \n        const x = Math.trunc(xMin + Math.random() * (xMax - xMin));\n        const y = Math.trunc(yMin + Math.random() * (yMax - yMin));\n        if (this.forest[x][y] === FOREST_STATE_FOREST)\n          continue;\n\n        this.forest[x][y] = FOREST_STATE_SEEDED;\n        const key = x + \",\" + y;\n        const value = this.seeds.get(key) || 0;\n        this.seeds.set(key, value + this.seedStrength);\n      }\n    }\n  }\n}","import Worker from './pathfinding.worker';\nimport { Tree } from '../ForestGenerator';\nimport { PathfindingModule } from './interfaces';\n\nconst worker = new Worker();\n\nasync function initPathfinding(): Promise<void> {\n  return Promise.resolve();\n}\n\nfunction startPathFinding(width: number, height: number): boolean {\n  worker.postMessage({\n    pathfinding: {\n      operation: 'start',\n      payload: {\n        width,\n        height,\n      },\n    },\n  });\n\n  return true;\n}\nfunction setObstacles(obstacles: Array<Tree>): boolean {\n  worker.postMessage({\n    pathfinding: {\n      operation: 'setObstacles',\n      payload: {\n        obstacles,\n      },\n    },\n  });\n\n  return true;\n}\n\nfunction findPath(from: [number, number, number], to: [number, number, number]): Array<number[]> {\n  return [[1, 1]];\n}\n\nasync function findPathAsync(from: [number, number, number], to: [number, number, number]): Promise<Array<number[]>> {\n  return new Promise((res, rej) => {\n    worker.postMessage({\n      pathfinding: {\n        operation: 'findPath',\n        payload: {\n          from,\n          to,\n        },\n      },\n    });\n    worker.onmessage = (event: MessageEvent) => {\n      if (event.data.pathfindingResult && event.data.pathfindingResult.operation === 'findPath') {\n        res(event.data.pathfindingResult.result);\n      }\n    }\n  });\n}\n\nconst Module: PathfindingModule = {\n  initPathfinding,\n  startPathFinding,\n  setObstacles,\n  findPath,\n  findPathAsync,\n};\n\nexport default Module;\n","import { Tree } from \"../ForestGenerator\";\nimport \"go-pathfinding/wasm_exec\";\nimport { PathfindingModule } from \"./interfaces\";\n\nlet isInitialized = false\n\nasync function initPathfinding(): Promise<void> {\n  if (isInitialized) {\n    return Promise.resolve();\n  }\n  // @ts-ignore\n  const go = new Go();\n  const response = await fetch('node_modules/go-pathfinding/build/go-pathfinding.wasm');\n  const bytes = await response.arrayBuffer();\n  const result = await WebAssembly.instantiate(bytes, go.importObject);\n  isInitialized = true;\n  \n  go.run(result.instance);\n}\n\nfunction startPathFinding(width: number, height: number): boolean {\n  //@ts-ignore\n  window.setGrid(width, height);\n\n  return true;\n}\nfunction setObstacles(obstacles: Array<Tree>): boolean {\n  const obstaclesArray: Array<number> = obstacles.reduce((\n    aggr: Array<number>,\n    {x, y}\n  ) => {\n    aggr.push(x);\n    aggr.push(y);\n    return aggr;\n  }, []);\n  //@ts-ignore\n  window.setObstacles(...obstaclesArray);\n\n  return true;\n}\n\nfunction findPath(from: [number, number, number], to: [number, number, number]): Array<number[]> {\n  //@ts-ignore\n  const rawPath = window.findPath(from[0] / 2, from[2] / 2, to[0] / 2, to[2] / 2);\n  const path = [];\n  if (rawPath) {\n    for (let i=0, j=0; i<rawPath.length; i+=2, j++) {\n      path[j] = [parseInt(rawPath[i], 10), parseInt(rawPath[i+1], 10)];\n    }\n  }\n  return path;\n}\n\nfunction findPathAsync(from: [number, number, number], to: [number, number, number]): Promise<Array<number[]>> {\n  return new Promise((res) => {\n    res(findPath(from, to));\n  });\n}\n\nconst Module: PathfindingModule = {\n  initPathfinding,\n  startPathFinding,\n  setObstacles,\n  findPath,\n  findPathAsync,\n};\n\nexport default Module;\n","// @ts-ignore\nimport { AsBind } from 'as-bind';\nimport { PathfindingModule, Finder } from \"./interfaces\";\nimport { Tree } from \"../ForestGenerator\";\n\nlet grid: Int8Array;\nlet finder: Finder;\nlet height = 1;\n\nasync function initPathfinding(): Promise<void> {\n  const { exports } = await AsBind.instantiate(fetch(\"node_modules/assemblyscript-pathfinding/build/as-pathfinding.wasm\"));\n  const { findPath } = exports;\n  finder = findPath;\n\n  return;\n}\n\nfunction startPathFinding(_width: number, _height: number): boolean {\n  grid = new Int8Array(_width * _height + 2);\n  grid[0] = _height;\n  grid[1] = _width;\n  height = _height;\n\n  return true;\n}\nfunction setObstacles(obstacles: Array<Tree>): boolean {\n  obstacles.forEach(({ x, y }) => {\n    grid[2 + (y * height + x)] = 1;\n  });\n\n  return true;\n}\n\nfunction findPath(from: [number, number, number], to: [number, number, number]): Array<number[]> {\n  const res = finder(\n    grid,\n    Math.trunc(from[2] / 2),\n    Math.trunc(from[0] / 2),\n    Math.trunc(to[2] / 2),\n    Math.trunc(to[0] / 2),\n  );\n\n  const path = [];\n  for (let i = 0; i < res.length - 1; i += 2) {\n    path.push([res[i], res[i + 1]]);\n  }\n\n  return path;\n}\n\nfunction findPathAsync(from: [number, number, number], to: [number, number, number]): Promise<Array<number[]>> {\n  return new Promise((resolve, reject) => {\n    resolve(findPath(from, to));\n  });\n}\n\n\nconst Module: PathfindingModule = {\n  initPathfinding,\n  startPathFinding,\n  setObstacles,\n  findPath,\n  findPathAsync,\n};\n\nexport default Module;\n","/*\nauto-generated by: https://github.com/react-spring/gltfjsx\nauthor: XNdrive (https://sketchfab.com/XNdrive)\nlicense: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)\nsource: https://sketchfab.com/3d-pathfinding-demo/models/low-poly-tree-1-b512acc620ab4040ae942886ac5146f5\ntitle: Low Poly Tree 1\n*/\n\nimport React from 'react'\nimport { useLoader } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nexport default function Tree(props) {\n  const { nodes, materials } = useLoader(GLTFLoader, '/pathfinding-demo/models/pine/scene.gltf')\n  const { scale = [1, 1, 1] } = props;\n  nodes.tree_trunk001_0.geometry.computeBoundingBox();\n  const z = nodes.tree_leaves001_0.geometry.boundingBox.min.z * scale[1];\n\n  return (\n    <group rotation={[-Math.PI / 2, 0, 0]} {...props} scale={scale} dispose={null}>\n      <mesh geometry={nodes.tree_leaves001_0.geometry} position={[0, 0, -z]} castShadow receiveShadow>\n        <meshPhysicalMaterial attach=\"material\" color=\"green\" />\n      </mesh>\n      <mesh material={materials['trunk.001']} geometry={nodes.tree_trunk001_0.geometry} position={[0, 0, -z]} castShadow receiveShadow />\n    </group>\n  )\n}\n","import React, { memo, useEffect } from 'react'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader'\nimport { AnimationMixer, Clock } from 'three';\n\nexport default memo(function PlayerModel(props) {\n  const { isWalking = false } = props;\n  const Abe = useLoader(FBXLoader, '/pathfinding-demo/models/player/BreathingIdle.fbx');\n  const AbeWalking = useLoader(FBXLoader, '/pathfinding-demo/models/player/WalkForward.fbx');\n  Abe.traverse(o => {\n    if (o.isMesh) {\n      o.castShadow = true;\n      o.receiveShadow = true;\n    }\n  });\n  const mixer = new AnimationMixer(Abe);\n  const idleAnimation = mixer.clipAction(Abe.animations[0]);\n  const walkAnimation = mixer.clipAction(AbeWalking.animations[0]);\n  \n  useEffect(() => {\n    if (isWalking) {\n      idleAnimation.stop();\n      walkAnimation.play();\n    } else {\n      walkAnimation.stop();\n      idleAnimation.play();\n    }\n    }, [isWalking]);\n  \n  const clock = new Clock();\n  useFrame(() => {\n    const delta = clock.getDelta();\n    mixer.update(delta);\n  });\n\n  return <group {...props}>\n    <primitive object={Abe} scale={[0.0075, 0.0075, 0.0075]} position={[0, -0.5, 0]} attach=\"target\" />\n  </group>;\n});\n","import React, { useState, useRef, useEffect, Suspense, memo, useMemo } from 'react'\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { Canvas, extend, useThree, useFrame } from 'react-three-fiber';\r\nimport { PerspectiveCamera } from 'drei';\r\nimport { ForestGenerator } from './utils/ForestGenerator';\r\nimport PathfindingJs from './utils/pathfinding/js';\r\nimport PathfindingThreaded from './utils/pathfinding/threaded';\r\nimport PathfindingGo from './utils/pathfinding/go';\r\nimport PathfindingAs from './utils/pathfinding/as';\r\n\r\nimport './App.css';\r\nimport Tree from './pathfinding-demo/models/Tree'\r\nimport PlayerModel from './pathfinding-demo/models/Player'\r\n\r\nconst forest = new ForestGenerator(50, 50, 10);\r\nPathfindingGo.initPathfinding();\r\nPathfindingAs.initPathfinding();\r\n\r\nextend({ OrbitControls });\r\n\r\nconst Controls = memo(({ position, target }) => {\r\n  const orbitRef = useRef();\r\n  const { camera, gl } = useThree();\r\n\r\n  useEffect(() => {\r\n    camera.lookAt(position)\r\n    orbitRef.current && orbitRef.current.target.copy(new THREE.Vector3(...target));\r\n  }, [position, target, orbitRef, camera]);\r\n\r\n  useFrame(() => {\r\n    orbitRef.current.update();\r\n  });\r\n\r\n  return (\r\n    <orbitControls\r\n      maxPolarAngle={Math.PI / 3}\r\n      minPolarAngle={Math.PI / 3}\r\n      args={[camera, gl.domElement]}\r\n      ref={orbitRef}\r\n    />\r\n  )\r\n});\r\n\r\nconst Pines = memo(({ finder }) => {\r\n  const [trees, setTrees] = useState([]);\r\n  useEffect(() => {\r\n    const map = forest.generate();\r\n    setTrees(map);\r\n    finder.setObstacles(map);\r\n  }, [finder]);\r\n\r\n  return (\r\n    <Suspense fallback={<></>}>\r\n      {trees.map(({ x, y, age }) => (<Tree\r\n        position={[\r\n          x * 2 + Math.random(),\r\n          0.2,\r\n          y * 2 + Math.random()\r\n        ]}\r\n        scale={[\r\n          0.2 + age * 0.1,\r\n          0.2 + age * 0.1,\r\n          0.2 + age * 0.1\r\n        ]}\r\n      />))}\r\n    </Suspense>\r\n  );\r\n});\r\n\r\nconst Path = ({ points, target }) => {\r\n  return <>\r\n    <mesh position={[target[0], -0.5, target[2]]} castShadow>\r\n      <boxBufferGeometry attach='geometry' args={[0.25, 0.1, 0.25]} />\r\n      <meshPhysicalMaterial attach='material' color='darkgreen' />\r\n    </mesh>\r\n    {points.slice(1).map(p => (\r\n      <mesh position={[p[1] * 2, -0.5, p[0] * 2]} castShadow>\r\n        <boxBufferGeometry attach='geometry' args={[0.25, 0.1, 0.25]} />\r\n        <meshPhysicalMaterial attach='material' color='green' />\r\n      </mesh>\r\n    ))}\r\n  </>\r\n}\r\n\r\nconst Plane = ({ handleClick, handleMove }) => {\r\n  return (\r\n    <mesh rotation={[-Math.PI / 2, 0, 0]} position={[50, -0.5, 50]} receiveShadow onClick={handleClick} onPointerMove={handleMove}>\r\n      <planeBufferGeometry attach='geometry' args={[100, 100, 100, 100]} />\r\n      <meshPhysicalMaterial attach='material' color='darkgreen' />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nconst Camera = ({ position }) => {\r\n  return (\r\n    <PerspectiveCamera makeDefault position={position} fov={15} />\r\n  );\r\n}\r\n\r\nexport default () => {\r\n  const [playerPosition, setPlayerPosition] = useState([25, 0, 25]);\r\n  const [targetPosition, setTargetPosition] = useState([25, 0, 25]);\r\n  const [cameraPosition, setCameraPosition] = useState([60, 5, 75]);\r\n  const [path, setPath] = useState([]);\r\n  const [isWalking, setIsWalking] = useState(false);\r\n  const [isFinderReady, setFinderReady] = useState(false);\r\n  const [isWorkerBusy, setIsWorkerBusy] = useState(false);\r\n  const [finderMode, setFinderMode] = useState('threaded');\r\n  const Finder = useMemo(() => {\r\n    switch(finderMode) {\r\n      case 'js': return PathfindingJs;\r\n      case 'go': return PathfindingGo;\r\n      case 'assemblyscript': return PathfindingAs;\r\n      default: return PathfindingThreaded;\r\n    }\r\n  }, [finderMode]);\r\n  function handleClick(e) {\r\n    setIsWalking(!isWalking);\r\n  }\r\n  async function handleMove(e) {\r\n    if (isWorkerBusy) {\r\n      return;\r\n    }\r\n    setIsWorkerBusy(true);\r\n    const newTarget = [e.point.x, e.point.y, e.point.z];\r\n    setTargetPosition(newTarget);\r\n    const path = await Finder.findPathAsync(playerPosition, newTarget);\r\n    setIsWorkerBusy(false);\r\n    setPath(path);\r\n  }\r\n\r\n  const lightTarget = new THREE.Object3D();\r\n  lightTarget.position.set(50, 0, 50);\r\n\r\n  useEffect(() => {\r\n    if (isFinderReady) {\r\n      Finder.startPathFinding(50, 50);\r\n    }\r\n  }, [isFinderReady, Finder]);\r\n\r\n  useEffect(() => {\r\n    Finder.initPathfinding().then(() => setFinderReady(true));\r\n  }, [Finder]);\r\n\r\n  return isFinderReady && (\r\n    <>\r\n    <div className=\"controls\">\r\n      {['js', 'threaded', 'go', 'assemblyscript'].map(mode => (\r\n        <span className={`control ${mode === finderMode ? 'selected' : ''}`} onClick={() => setFinderMode(mode)}>{mode}</span>\r\n      ))}\r\n    </div>\r\n    <Canvas\r\n      onCreated={({ gl }) => {\r\n        gl.shadowMap.enabled = true\r\n        gl.shadowMap.type = THREE.PCFSoftShadowMap\r\n        // gl.physicallyCorrectLights = true;\r\n      }}\r\n    >\r\n      <Camera position={cameraPosition} />\r\n      <ambientLight intensity={0.75} />\r\n      <spotLight\r\n        position={[50, 10, 50]}\r\n        penumbra={1}\r\n        decay={2}\r\n        castShadow\r\n      />\r\n      {/* <fog attach='fog' args={['black', 75, 100]} /> */}\r\n      <Controls position={playerPosition} target={playerPosition} />\r\n      <Suspense fallback={<></>}>\r\n        <PlayerModel position={playerPosition} isWalking={isWalking} />\r\n      </Suspense>\r\n      <Suspense fallback={<></>}>\r\n        <Plane handleClick={handleClick} handleMove={handleMove} />\r\n      </Suspense>\r\n      <Pines finder={Finder} />\r\n      <Path points={path} target={targetPosition} />\r\n    </Canvas>\r\n    </>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}