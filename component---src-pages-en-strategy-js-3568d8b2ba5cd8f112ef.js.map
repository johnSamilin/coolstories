{"version":3,"sources":["webpack:///./src/pages/en/strategy.js"],"names":["Page","lang","className","path","title","brackets","show","type","roughness","color","id","width","height","renderer","d","stroke","to","class","loading","src","alt"],"mappings":"8FAAA,iJAmQeA,UAtPF,kBACX,kBAAC,IAAD,CAAQC,KAAK,KAAKC,UAAU,gBAAgBC,KAAK,YAC/C,kBAAC,IAAD,CAAKC,MAAM,2BACX,4BAAQF,UAAU,QAChB,gDACA,8MAMF,kBAAC,IAAD,CACEG,SAAS,SACTC,MAAI,EACJC,KAAK,UACLC,UAAW,EACXC,MAAM,OAEN,iCACE,6MAIE,yBAAKC,GAAG,qBACN,kBAAC,IAAD,CAAYC,MAAO,IAAKC,OAAQ,IAAKC,SAAS,OAC5C,kBAAC,IAAD,CACEL,UAAW,EACXM,EAAE,0bAEJ,kBAAC,IAAD,CACEC,OAAO,QACPD,EAAE,gQAEJ,kBAAC,IAAD,CACEC,OAAO,QACPD,EAAE,mDAEJ,kBAAC,IAAD,CACEC,OAAO,MACPD,EAAE,oFAEJ,kBAAC,IAAD,CACEC,OAAO,MACPD,EAAE,qFAEJ,kBAAC,IAAD,CACEC,OAAO,MACPD,EAAE,qFAEJ,kBAAC,IAAD,CACEC,OAAO,MACPD,EAAE,mFAEJ,kBAAC,IAAD,CACEC,OAAO,MACPD,EAAE,mFAEJ,kBAAC,IAAD,CACEC,OAAO,mBACPD,EAAE,sHAxCV,6RAiDE,6BACA,6BAlDF,iPAuDE,kBAAC,OAAD,CAAME,GAAG,iDAAT,sCAvDF,0LA8DA,2JAE4D,IAC1D,kBAAC,OAAD,CAAMA,GAAG,yDAAT,SAEQ,IALV,mUAWE,6BACA,kBAAC,OAAD,CAAMA,GAAG,iKAAT,aAZF,OAmBJ,yBAAKC,MAAM,eACT,yBACEC,QAAQ,OACRC,IAAI,uBACJC,IAAI,4BAEN,yBAAKlB,UAAU,QACb,kBAAC,IAAD,CAAWA,UAAU,cAEjB,mrBAkCN,yBACEgB,QAAQ,OACRC,IAAI,wBACJC,IAAI,0BAGR,kBAAC,IAAD,CACEf,SAAU,CAAC,MAAO,UAClBC,MAAI,EACJC,KAAK,UACLC,UAAW,EACXC,MAAM,OAEN,iCACE,qDAC0B,IACxB,kBAAC,OAAD,CAAMO,GAAG,kKAAT,wCAGA,6BACA,6BANF,qqCAyBE,yBAAKd,UAAU,QACb,kBAAC,IAAD,CAAWA,UAAU,cAEjB,+vBA5BR,4JA0DE,6BACA,6BA3DF,gMA+DE,6BACA,6BAhEF,cAiEa,kBAAC,OAAD,CAAMc,GAAG,kBAAT,cAjEb,wFAqEA,yBAAKd,UAAU,QAAf,oBACA,kBAAC,IAAD,CAAQD,KAAK,SAGjB,yBAAKgB,MAAM,eACT,yBACEC,QAAQ,OACRC,IAAI,4BACJC,IAAI,gCAEN,yBACEF,QAAQ,OACRC,IAAI,yBACJC,IAAI,yBAEN,yBAAKF,QAAQ,OAAOC,IAAI,sBAAsBC,IAAI","file":"component---src-pages-en-strategy-js-3568d8b2ba5cd8f112ef.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport ReactRough, { Path } from \"react-rough\"\nimport { RoughNotation } from \"react-rough-notation\"\nimport Highlight from \"react-highlight\"\n\nimport Layout from \"../../components/layout\"\nimport SEO from \"../../components/seo\"\nimport { Footer } from \"../../components/footer\"\n\nimport \"../strategy.css\"\nimport \"highlight.js/styles/Hybrid.css\"\n\nconst Page = () => (\n  <Layout lang=\"en\" className=\"strategy-page\" path=\"strategy\">\n    <SEO title=\"About crowd management\" />\n    <header className=\"lead\">\n      <h1>Crowd management</h1>\n      <summary>\n        Game developement is funny. Especially for the one who does regular\n        frontend like me for example. For someone who thinks in other categories\n        and architectural patterns.\n      </summary>\n    </header>\n    <RoughNotation\n      brackets=\"bottom\"\n      show\n      type=\"bracket\"\n      roughness={1}\n      color=\"red\"\n    >\n      <article>\n        <p>\n          Like, how do you move the players model and syncronize its movement\n          with the steps animation so that the leg does not slide the surface\n          but stays in place until the next step?\n          <div id=\"path-illustration\">\n            <ReactRough width={720} height={600} renderer=\"svg\">\n              <Path\n                roughness={1}\n                d=\"M656.548,228.571C630.357,228.571 629.167,253.571 630.357,254.762C631.548,255.952 629.167,271.429 649.405,276.19C669.643,280.952 682.738,270.238 685.119,255.952C687.5,241.667 638.69,189.286 660.119,309.524C681.548,429.762 714.881,380.952 681.548,390.476C648.214,400 696.7,412.502 669.481,350.299C642.262,288.095 536.31,310.714 672.024,309.524C807.738,308.333 700.595,307.143 724.405,309.524C748.214,311.905 649.081,304.169 669.481,350.299\"\n              />\n              <Path\n                stroke=\"black\"\n                d=\"M684.935,407.755C684.935,407.755 655.983,506.04 588.173,508.326C520.364,510.612 447.221,378.802 454.84,392.516C462.459,406.231 396.174,275.945 298.65,367.374C201.126,458.802 188.174,230.993 185.888,212.707C183.602,194.421 195.793,8.517 340.555,130.421\"\n              />\n              <Path\n                stroke=\"black\"\n                d=\"M329.507,130.97L340.851,130.97L340.851,120.744\"\n              />\n              <Path\n                stroke=\"red\"\n                d=\"M604.173,487.755L626.269,509.85L616.364,499.945L632.364,483.945L603.411,512.897\"\n              />\n              <Path\n                stroke=\"red\"\n                d=\"M466.269,430.612L501.316,430.612L484.554,430.612L484.554,415.374L484.554,445.088\"\n              />\n              <Path\n                stroke=\"red\"\n                d=\"M364.935,320.897L395.412,351.374L379.924,335.886L394.417,321.393L366.081,349.729\"\n              />\n              <Path\n                stroke=\"red\"\n                d=\"M244.371,375.819L269.836,401.284L257.478,388.926L270.71,375.694L245.494,400.91\"\n              />\n              <Path\n                stroke=\"red\"\n                d=\"M171.969,203.303L201.429,203.303L185.95,203.303L182.455,190.57L190.195,212.541\"\n              />\n              <Path\n                stroke=\"rgb(235,235,235)\"\n                d=\"M683.976,407.675L617.538,500.322L484.662,432.056L379.824,336.97L259.139,388.779L185.996,204.094L340.815,130.342\"\n              />\n            </ReactRough>\n          </div>\n          &nbsp;We have the path to go, the model to animate and the ground. But\n          how do you rotate the character in the right direction? If he went in\n          the straight line you could just rotate him in the direction of the\n          last point. But path a is broken curve and if you do so, he will go\n          crab-like.\n          <br />\n          <br />\n          Some might say that you could rotate the player every time he reaches\n          the next path control point. But that won't give you suitable result\n          because he will be rotated too fast. After days of experiments and\n          searching I found the solution (\n          <Link to=\"https://github.com/mrdoob/three.js/issues/743\">\n            How to move objects along a spline\n          </Link>\n          ): place a Besier curve through all the control points and re-face the\n          player model as is moves. Now you can see smooth cool movement (with\n          some bugs, but let's don't talk about it).\n        </p>\n        <p>\n          Yay! But there is a spoon of tar: three.js animations don't play by\n          themselves, you should imperatively control them by using{\" \"}\n          <Link to=\"https://threejs.org/docs/index.html#api/en/core/Clock\">\n            Clock\n          </Link>{\" \"}\n          object. And it works bad if there is a lot of work to be done in the\n          scene: if you rotate the camera in the process, the animation will\n          stuck. It definately great for animating unnesessary objects, but not\n          the player object. In order to make this task super-duper-priority, I\n          wrote custom implementation using webworker.\n          <br />\n          <Link to=\"https://github.com/johnSamilin/forest/commit/c272188c5fb6c7f17a223df6067b68c07c690c50#diff-7ab582f544ca56c9375ffb3cb4e7e8cbeb3dca29aabe63205f81e34c415f56c1R1\">\n            Full code\n          </Link>\n          .\n        </p>\n      </article>\n    </RoughNotation>\n    <div class=\"gif-wrapper\">\n      <img\n        loading=\"lazy\"\n        src=\"/images/useFrame.gif\"\n        alt=\"Movement without worker\"\n      />\n      <div className=\"code\">\n        <Highlight className=\"javascript\">\n          {\n            \"const ctx: Worker = self as any;\\n \\\n\\n \\\nlet lastTime: number;\\n \\\nlet scheduleNextCall = true;\\n \\\n\\n \\\nfunction tick() {\\n \\\n  const currentTime = performance.now();\\n \\\n  ctx.postMessage({\\n \\\n    useFrame: {\\n \\\n      delta: (currentTime - lastTime) / 1000, // in seconds\\n \\\n    },\\n \\\n  });\\n \\\n  lastTime = currentTime;\\n \\\n  if (scheduleNextCall) {\\n \\\n    requestAnimationFrame(tick);\\n \\\n  }\\n \\\n}\\n \\\n\\n \\\n// Respond to message from parent thread\\n \\\nctx.addEventListener('message', (e) => {\\n \\\n  if (!e.data.useFrame) {\\n \\\n    return;\\n \\\n  }\\n \\\n  if (e.data.useFrame.enabled) {\\n \\\n    scheduleNextCall = true;\\n \\\n    lastTime = performance.now();\\n \\\n    tick();\\n \\\n  } else {\\n \\\n    scheduleNextCall = false;\\n \\\n  }\\n \\\n});\"\n          }\n        </Highlight>\n      </div>\n      <img\n        loading=\"lazy\"\n        src=\"/images/useWorker.gif\"\n        alt=\"Movement with worker\"\n      />\n    </div>\n    <RoughNotation\n      brackets={[\"top\", \"bottom\"]}\n      show\n      type=\"bracket\"\n      roughness={1}\n      color=\"red\"\n    >\n      <article>\n        <p>\n          After some confession I{\" \"}\n          <Link to=\"https://github.com/johnSamilin/forest/commit/f088c3b76a487ca26f0b4d96dca636b73b354da3#diff-3d74dddefb6e35fbffe3c76ec0712d5c416352d9449e2fcc8210a9dee57dff67R52\">\n            decided to add some more characters.\n          </Link>\n          <br />\n          <br />\n          Архитектура react диктует императивный подход к управлению: когда\n          компонент, представляющий игрока, получает новый путь, то он, как\n          истинный самурай, реагирует запуском анимаций и передвижением по нему.\n          Это свойство передает ему родительский компонент, так что, если в\n          момент передвижения одной фигурки задать маршрут для другой, то все\n          сразу сломается. Думаю, в нормальных движках с ООП-подходом такие вещи\n          разрешаются легко и просто, но в проекте, где используется\n          react-three-fiber, нужно исходить из принятых шаблонов. И самым\n          логичным было бы выделение общего менеджера, который бы управлял NPC,\n          как кукловод. На роль такого менеджера неплохо подошел Redux. React\n          architecture forces to use imperative management: when a component\n          receives a new path it reacts with starting animations and moving the\n          model along the way. This property is being passed by the parent\n          component so if it changes during the movement, the will be big\n          badaboom. I'm sure this doesn't take place in mature game engines but\n          as long as I use react-three-fiber, I need to follow the rules. I\n          needed some manager which could manipulate the models like a\n          puppeteer. The most suitable solution is to use Redux.\n          <div className=\"code\">\n            <Highlight className=\"javascript\">\n              {\n                \"const [activePlayer, setActivePlayer] = useState('oldman');\\n \\\n                \\n \\\nconst [playersState, dispatch] = useReducer(playersReducer, {\\n \\\n  movement: playerIds.reduce((acc, id) => ({ ...acc, [id]: null }), {}),\\n \\\n  position: playerIds.reduce((acc, id, index) => ({ ...acc, [id]: [25 + index, 0, 25 + index] }), {}),\\n \\\n});\\n \\\n\\n \\\nfunction handleFloorClick(e) {\\n \\\n  e.stopPropagation();\\n \\\n  if (isWorkerBusy) {\\n \\\n    return;\\n \\\n  }\\n \\\n  dispatch(movePlayer(activePlayer, path));\\n \\\n}\\n \\\n\\n \\\n<Context.Provider value={{ dispatch, playersState }}> \\n \\\n  {playerIds.map((id) => <Character \\n \\\n    id={id} \\n \\\n    position={playersState.position[id]} \\n \\\n    model=\\\"player/Manequin\\\" \\n \\\n    isSelected={activePlayer === id} \\n \\\n  />)} \\n \\\n</Context.Provider>\\\n                \"\n              }\n            </Highlight>\n          </div>\n          Now the game controller is searching the path and passes it to\n          selected unit. It, in turn, notifies the cotroller about the fact that\n          it reached the end.\n          <br />\n          <br />\n          Finally, when each NPC can move it's own way, I should probably teach\n          them to go together. Just find the path for each of the selected\n          characters separately if the final point is reachable.\n          <br />\n          <br />\n          There is a <Link to=\"/strategy-demo\">demo scene</Link> where you can\n          try it in action. Hold left shift button to select more than one NPC.\n        </p>\n\n        <div className=\"date\">21 february 2021</div>\n        <Footer lang=\"en\" />\n      </article>\n    </RoughNotation>\n    <div class=\"gif-wrapper\">\n      <img\n        loading=\"lazy\"\n        src=\"/images/separate-walk.gif\"\n        alt=\"Передвижение по отдельности\"\n      />\n      <img\n        loading=\"lazy\"\n        src=\"/images/group-walk.gif\"\n        alt=\"Передвижение группой\"\n      />\n      <img loading=\"lazy\" src=\"/images/bracket.gif\" alt=\"Выделение группы\" />\n    </div>\n  </Layout>\n)\n\nexport default Page\n"],"sourceRoot":""}