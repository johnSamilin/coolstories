{"version":3,"sources":["models/Tree.js","TreeOnACube.js","serviceWorker.js","index.js"],"names":["Tree","props","useLoader","GLTFLoader","nodes","materials","scale","tree_trunk001_0","geometry","computeBoundingBox","console","log","tree_leaves001_0","boundingBox","z","min","rotation","Math","PI","dispose","position","castShadow","attach","color","material","receiveShadow","extend","OrbitControls","Controls","orbitRef","useRef","useThree","camera","gl","useFrame","current","update","autoRotate","args","domElement","ref","Box","mesh","meshPhysicalMaterial","Camera","makeDefault","fov","aspect","width","height","onCreated","shadowMap","enabled","type","THREE","intensity","penumbra","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAYe,SAASA,EAAKC,GAAQ,IAAD,EACLC,YAAUC,IAAY,2BAA3CC,EAD0B,EAC1BA,MAAOC,EADmB,EACnBA,UADmB,EAEJJ,EAAtBK,aAF0B,MAElB,CAAC,EAAG,EAAG,GAFW,EAGlCF,EAAMG,gBAAgBC,SAASC,qBAC/BC,QAAQC,IAAIP,EAAMQ,iBAAiBJ,SAASK,aAC5C,IAAMC,EAAIV,EAAMQ,iBAAiBJ,SAASK,YAAYE,IAAID,EAAIR,EAAM,GAEpE,OACE,yCAAOU,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,IAAQjB,EAA3C,CAAkDK,MAAOA,EAAOa,QAAS,OACvE,0BAAMX,SAAUJ,EAAMQ,iBAAiBJ,SAAUY,SAAU,CAAC,EAAG,GAAIN,GAAIO,YAAU,GAC/E,0CAAsBC,OAAO,WAAWC,MAAM,WAEhD,0BAAMC,SAAUnB,EAAU,aAAcG,SAAUJ,EAAMG,gBAAgBC,SAAUY,SAAU,CAAC,EAAG,GAAIN,GAAIO,YAAU,EAACI,eAAa,KCdtIC,YAAO,CAAEC,oBAET,IAAMC,EAAW,WACf,IAAMC,EAAWC,mBADI,EAEEC,cAAfC,EAFa,EAEbA,OAAQC,EAFK,EAELA,GAMhB,OAJAC,aAAS,WACPL,EAASM,QAAQC,YAIjB,mCACEC,YAAU,EACVC,KAAM,CAACN,EAAQC,EAAGM,YAClBC,IAAKX,KAKLY,EAAM,WACV,OACE,kBAAC,IAAEC,KAAH,CACEtB,SAAU,CAAC,GAAI,EAAG,GAClBC,YAAU,EACVI,eAAa,GAEb,uCAAmBH,OAAO,WAAWgB,KAAM,CAAC,EAAG,EAAG,KAClD,kBAAC,IAAEK,qBAAH,CAAwBrB,OAAO,WAAWC,MAAM,WAKhDqB,EAAS,WACb,OACE,kBAAC,IAAD,CAAmBC,aAAW,EAACzB,SAAU,CAAC,GAAI,GAAI,IAAK0B,IAAK,GAAIC,OAAQ,KAI7D,aACb,OACE,oCACE,kBAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACRC,UAAW,YAAa,IAAVjB,EAAS,EAATA,GACZA,EAAGkB,UAAUC,SAAU,EACvBnB,EAAGkB,UAAUE,KAAOC,qBAGtB,kBAAC,EAAD,MACA,kCAAcC,UAAW,MACzB,+BAAWnC,SAAU,CAAC,GAAI,GAAI,GAAIoC,SAAU,EAAGnC,YAAU,IACzD,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUoC,SAAU,sCAClB,kBAACzD,EAAD,CAAMoB,SAAU,CAAC,GAAI,EAAG,MAExB,kBAAC,EAAD,SCtDUsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.d153d137.chunk.js","sourcesContent":["/*\nauto-generated by: https://github.com/react-spring/gltfjsx\nauthor: XNdrive (https://sketchfab.com/XNdrive)\nlicense: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)\nsource: https://sketchfab.com/3d-models/low-poly-tree-1-b512acc620ab4040ae942886ac5146f5\ntitle: Low Poly Tree 1\n*/\n\nimport React from 'react'\nimport { useLoader } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nexport default function Tree(props) {\n  const { nodes, materials } = useLoader(GLTFLoader, '/tree-on-cube/models/pine/scene.gltf')\n  const { scale = [1, 1, 1] } = props;\n  nodes.tree_trunk001_0.geometry.computeBoundingBox();\n  console.log(nodes.tree_leaves001_0.geometry.boundingBox)\n  const z = nodes.tree_leaves001_0.geometry.boundingBox.min.z * scale[1];\n\n  return (\n    <group rotation={[-Math.PI / 2, 0, 0]} {...props} scale={scale} dispose={null}>\n      <mesh geometry={nodes.tree_leaves001_0.geometry} position={[0, 0, -z]} castShadow>\n        <meshPhysicalMaterial attach=\"material\" color=\"green\" />\n      </mesh>\n      <mesh material={materials['trunk.001']} geometry={nodes.tree_trunk001_0.geometry} position={[0, 0, -z]} castShadow receiveShadow />\n    </group>\n  )\n}\n","import React, { useRef, Suspense } from 'react'\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { Canvas, extend, useThree, useFrame } from 'react-three-fiber'\nimport { a } from 'react-spring/three'\nimport { PerspectiveCamera } from 'drei';\n\nimport './TreeOnACube.css';\nimport Tree from './models/Tree'\n\nextend({ OrbitControls });\n\nconst Controls = () => {\n  const orbitRef = useRef();\n  const { camera, gl } = useThree();\n\n  useFrame(() => {\n    orbitRef.current.update();\n  });\n\n  return (\n    <orbitControls\n      autoRotate\n      args={[camera, gl.domElement]}\n      ref={orbitRef}\n    />\n  )\n}\n\nconst Box = () => {\n  return (\n    <a.mesh\n      position={[0, -4, 0]}        \n      castShadow\n      receiveShadow\n    >\n      <boxBufferGeometry attach='geometry' args={[1, 1, 1]} />\n      <a.meshPhysicalMaterial attach='material' color=\"gray\" />\n    </a.mesh>\n  );\n}\n\nconst Camera = () => {\n  return (\n    <PerspectiveCamera makeDefault position={[10, 10, 25]} fov={18} aspect={1} />\n  );\n}\n\nexport default () => {\n  return (\n    <>\n      <Canvas\n        width={200}\n        height={300}\n        onCreated={({ gl }) => {\n          gl.shadowMap.enabled = true\n          gl.shadowMap.type = THREE.PCFSoftShadowMap\n        }}\n      >\n        <Camera />\n        <ambientLight intensity={0.75} />\n        <spotLight position={[15, 20, 5]} penumbra={1} castShadow />\n        <Controls />\n        <Suspense fallback={<></>}> \n          <Tree position={[0, -3, 0]} />\n        </Suspense>\n          <Box />\n      </Canvas>\n    </>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './TreeOnACube';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}